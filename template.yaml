AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31

Resources:
  # --------------------------
  # Kinesis Video
  # --------------------------
  KinesisVideoStream:
    Type: AWS::KinesisVideo::Stream
    Properties:
      Name: MiStreamVideo
      DataRetentionInHours: 2

  # --------------------------
  # API Gateway con Authorizer
  # --------------------------
  MyApi:
    Type: AWS::Serverless::Api
    Properties:
      Name: MyApi
      StageName: dev
      Auth:
        Authorizers:
          CognitoAuthorizer:
            UserPoolArn: !GetAtt CognitoUserPool.Arn
            Identity:
              Header: Authorization
        DefaultAuthorizer: CognitoAuthorizer

  # --------------------------
  # DynamoDB
  # --------------------------
  ActionsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: actions
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST

  # --------------------------
  # Cognito
  # --------------------------
  CognitoUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: MiUserPool
      AutoVerifiedAttributes:
        - email

  CognitoUserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      UserPoolId: !Ref CognitoUserPool
      ClientName: MiAppClient
      GenerateSecret: false

  # --------------------------
  # Lambdas
  # --------------------------
  CreateCode:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: create_code/
      Handler: app.lambda_handler
      Runtime: python3.13
      Timeout: 10
      MemorySize: 128
      Environment:
        Variables:
          TABLE_NAME: !Ref ActionsTable
          LOCAL: "false"

      Policies:
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - dynamodb:PutItem
              Resource: !GetAtt ActionsTable.Arn
            - Effect: Allow
              Action:
                - iot:DescribeThing
              Resource: arn:aws:iot:us-east-1:*:thing/*
      Events:
        ApiPostCode:
          Type: Api
          Properties:
            RestApiId: !Ref MyApi
            Path: /code
            Method: post

  GetAllDevices:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: get_all_devices/
      Handler: app.lambda_handler
      Runtime: python3.13
      Timeout: 10
      MemorySize: 128
      Environment:
        Variables: 
          LOCAL: "false"
      Policies:
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - iot:ListThings
              Resource: "*"
      Events:
        ApiGetDevices:
          Type: Api
          Properties:
            RestApiId: !Ref MyApi
            Path: /devices
            Method: get

  Publish:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: publish/
      Handler: app.lambda_handler
      Runtime: python3.13
      Timeout: 10
      MemorySize: 128
      Policies:
        - Statement:
            - Effect: Allow
              Action:
                - iot:Publish
              Resource: arn:aws:iot:us-east-1:*:topic/devices/*/commands
      Events:
        ApiPostPublish:
          Type: Api
          Properties:
            RestApiId: !Ref MyApi
            Path: /publish
            Method: post

  ValidationCode:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: validation_code/
      Handler: app.lambda_handler
      Runtime: python3.13
      Timeout: 10
      MemorySize: 128
      Policies:
        - Statement:
            - Effect: Allow
              Action:
                - dynamodb:GetItem
              Resource: !GetAtt ActionsTable.Arn
        - Statement:
            - Effect: Allow
              Action:
                - iot:Publish
              Resource: arn:aws:iot:us-east-1:*:topic/devices/*/commands
      Events:
        ApiPostValidate:
          Type: Api
          Properties:
            Path: /validate
            Method: post

  ListStreams:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: list_kinesis_streams/
      Handler: app.lambda_handler
      Runtime: python3.13
      Timeout: 10
      MemorySize: 128
      Policies:
        - Statement:
            - Effect: Allow
              Action:
                - kinesisvideo:ListStreams
                - kinesisvideo:DescribeStream
              Resource: "*"
      Events:
        ApiGetStreams:
          Type: Api
          Properties:
            RestApiId: !Ref MyApi
            Path: /streams
            Method: get

  StreamLive:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: streams_live/
      Handler: app.lambda_handler
      Runtime: python3.13
      Timeout: 10
      MemorySize: 128
      Policies:
        - Statement:
            - Effect: Allow
              Action:
                - kinesisvideo:Get*
                - kinesisvideo:DescribeStream
                - kinesisvideo:ListFragments
              Resource: "*"
      Events:
        ApiGetLiveStream:
          Type: Api
          Properties:
            RestApiId: !Ref MyApi
            Path: /streams/live
            Method: get